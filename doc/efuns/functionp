
     ffffuuuunnnnccccttttiiiioooonnnnpppp((((3333))))           MMMMuuuuddddOOOOSSSS ((((5555 SSSSeeeepppp 1111999999994444))))            ffffuuuunnnnccccttttiiiioooonnnnpppp((((3333))))

     NNNNAAAAMMMMEEEE
          functionp() - determine whether or not a given variable is a
          function pointer, and if so what kind

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          int functionp( mixed arg );

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          Return nonzero if `arg' is a function pointer and zero (0)
          otherwise.  Function pointers are variables of type
          'function' as indicated in the documentation for the type
          'function', for example:

          f = (: obj, func :);

          The return value indicates the type of function pointer
          using the values given in the driver include file
          "include/function.h".

          function pointer type      value ---------------------
          ----- call_other            FP_CALL_OTHER lfun
          FP_LOCAL efun             FP_EFUN simul_efun
          FP_SIMUL functional            FP_FUNCTIONAL

          In addition, the following values will be added in some
          cases:  (arguments provided)      FP_HAS_ARGUMENTS (creator
          has been dested) FP_OWNER_DESTED (not rebindable)
          FP_NOT_BINDABLE

          The last set of values are bit values and can be tested with
          bit operations.  The value FP_MASK is provided for ignoring
          the bit values and testing the basic type of the function
          pointer.

          Examples:

          To test if a function variable is an efun pointer:

          if ((functionp(f) & FP_MASK) == FP_EFUN) ...

          to test if it has args:

          if (functionp(f) & FP_HAS_ARGUMENTS) ...

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          mapp(3), stringp(3), pointerp(3), objectp(3), intp(3),
          bufferp(3), floatp(3), nullp(3), undefinedp(3), errorp(3),
          bind(3), lpc/types/function

     Page 1                                          (printed 3/16/95)

